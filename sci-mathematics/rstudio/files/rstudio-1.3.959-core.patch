diff --git a/src/cpp/session/SessionClientInit.cpp b/src/cpp/session/SessionClientInit.cpp
index e4b3b7d..cc61516 100644
--- a/src/cpp/session/SessionClientInit.cpp
+++ b/src/cpp/session/SessionClientInit.cpp
@@ -100,17 +100,17 @@ std::string userIdentityDisplay(const http::Request& request)
 }
 
 #ifdef RSTUDIO_SERVER
-Error makePortTokenCookie(boost::shared_ptr<HttpConnection> ptrConnection, 
+Error makePortTokenCookie(boost::shared_ptr<HttpConnection> ptrConnection,
       http::Response& response)
 {
    // extract the base URL
-   json::JsonRpcRequest request;
+   core::json::JsonRpcRequest request;
    Error error = parseJsonRpcRequest(ptrConnection->request().body(), &request);
    if (error)
       return error;
    std::string baseURL;
 
-   error = json::readParams(request.params, &baseURL);
+   error = core::json::readParams(request.params, &baseURL);
    if (error)
       return error;
 
@@ -143,9 +143,9 @@ Error makePortTokenCookie(boost::shared_ptr<HttpConnection> ptrConnection,
 
    // create the cookie; don't set an expiry date as this will be a session cookie
    http::Cookie cookie(
-            ptrConnection->request(), 
-            kPortTokenCookie, 
-            persistentState().portToken(), 
+            ptrConnection->request(),
+            kPortTokenCookie,
+            persistentState().portToken(),
             path,
             options().sameSite(),
             true, // HTTP only -- client doesn't get to read this token
@@ -164,12 +164,12 @@ void handleClientInit(const boost::function<void()>& initFunction,
 {
    // alias options
    Options& options = session::options();
-   
-   // check for valid CSRF headers in server mode 
-   if (options.programMode() == kSessionProgramModeServer && 
+
+   // check for valid CSRF headers in server mode
+   if (options.programMode() == kSessionProgramModeServer &&
        !core::http::validateCSRFHeaders(ptrConnection->request()))
    {
-      ptrConnection->sendJsonRpcError(Error(json::errc::Unauthorized, ERROR_LOCATION));
+      ptrConnection->sendJsonRpcError(Error(core::json::errc::Unauthorized, ERROR_LOCATION));
       return;
    }
 
@@ -204,12 +204,12 @@ void handleClientInit(const boost::function<void()>& initFunction,
    }
 
    // prepare session info 
-   json::Object sessionInfo;
+   core::json::Object sessionInfo;
    sessionInfo["clientId"] = clientId;
    sessionInfo["mode"] = options.programMode();
 
    // build initialization options for client
-   json::Object initOptions;
+   core::json::Object initOptions;
    initOptions["restore_workspace"] = options.rRestoreWorkspace();
    initOptions["run_rprofile"] = options.rRunRprofile();
    sessionInfo["init_options"] = initOptions;
@@ -225,49 +225,49 @@ void handleClientInit(const boost::function<void()>& initFunction,
    }
 
    // temp dir
-   FilePath tempDir = rstudio::r::session::utils::tempDir();
-   Error error = tempDir.ensureDirectory();
+   core::FilePath tempDir = rstudio::r::session::utils::tempDir();
+   core::Error error = tempDir.ensureDirectory();
    if (error)
       LOG_ERROR(error);
    sessionInfo["temp_dir"] = tempDir.getAbsolutePath();
 
    // R_LIBS_USER
    sessionInfo["r_libs_user"] = module_context::rLibsUser();
-   
+
    // user home path
    sessionInfo["user_home_path"] = session::options().userHomePath().getAbsolutePath();
-   
+
    // installed client version
    sessionInfo["client_version"] = http_methods::clientVersion();
-   
+
    // default prompt
    sessionInfo["prompt"] = rstudio::r::options::getOption<std::string>("prompt");
 
    // client state
-   json::Object clientStateObject;
+   core::json::Object clientStateObject;
    rstudio::r::session::clientState().currentState(&clientStateObject);
    sessionInfo["client_state"] = clientStateObject;
-   
+
    // source documents
-   json::Array jsonDocs;
+   core::json::Array jsonDocs;
    error = modules::source::clientInitDocuments(&jsonDocs);
    if (error)
       LOG_ERROR(error);
    sessionInfo["source_documents"] = jsonDocs;
-   
+
    // docs url
    sessionInfo["docsURL"] = session::options().docsURL();
 
    // get alias to console_actions and get limit
    rstudio::r::session::ConsoleActions& consoleActions = rstudio::r::session::consoleActions();
    sessionInfo["console_actions_limit"] = consoleActions.capacity();
- 
+
    // check if reticulate's Python session has been initialized
    sessionInfo["python_initialized"] = modules::reticulate::isPythonInitialized();
-   
+
    // propagate RETICULATE_PYTHON if set
    sessionInfo["reticulate_python"] = core::system::getenv("RETICULATE_PYTHON");
-   
+
    // get current console language
    sessionInfo["console_language"] = modules::reticulate::isReplActive() ? "Python" : "R";
 
@@ -276,7 +276,7 @@ void handleClientInit(const boost::function<void()>& initFunction,
    if (resumed)
    {
       // console actions
-      json::Object actionsObject;
+     core::json::Object actionsObject;
       consoleActions.asJson(&actionsObject);
       sessionInfo["console_actions"] = actionsObject;
    }
@@ -313,7 +313,7 @@ void handleClientInit(const boost::function<void()>& initFunction,
 
    sessionInfo["have_advanced_step_commands"] =
                         modules::breakpoints::haveAdvancedStepCommands();
-   
+
    // initial working directory
    std::string initialWorkingDir = module_context::createAliasedPath(
                                           dirs::getInitialWorkingDirectory());
@@ -332,9 +332,9 @@ void handleClientInit(const boost::function<void()>& initFunction,
                               projects::projectContext().file());
       sessionInfo["project_ui_prefs"] = projects::projectContext().uiPrefs();
       sessionInfo["project_open_docs"] = projects::projectContext().openDocs();
-      sessionInfo["project_supports_sharing"] = 
+      sessionInfo["project_supports_sharing"] =
          projects::projectContext().supportsSharing();
-      sessionInfo["project_parent_browseable"] = 
+      sessionInfo["project_parent_browseable"] =
          projects::projectContext().parentBrowseable();
       sessionInfo["project_user_data_directory"] =
        module_context::createAliasedPath(
@@ -343,12 +343,12 @@ void handleClientInit(const boost::function<void()>& initFunction,
    }
    else
    {
-      sessionInfo["active_project_file"] = json::Value();
-      sessionInfo["project_ui_prefs"] = json::Value();
-      sessionInfo["project_open_docs"] = json::Value();
+      sessionInfo["active_project_file"] = core::json::Value();
+      sessionInfo["project_ui_prefs"] = core::json::Value();
+      sessionInfo["project_open_docs"] = core::json::Value();
       sessionInfo["project_supports_sharing"] = false;
       sessionInfo["project_owned_by_user"] = false;
-      sessionInfo["project_user_data_directory"] = json::Value();
+      sessionInfo["project_user_data_directory"] = core::json::Value();
    }
 
    sessionInfo["system_encoding"] = std::string(::locale2charset(nullptr));
@@ -385,20 +385,20 @@ void handleClientInit(const boost::function<void()>& initFunction,
       sessionInfo["build_tools_bookdown_website"] =
                               module_context::isBookdownWebsite();
 
-      FilePath buildTargetDir = projects::projectContext().buildTargetPath();
+      core::FilePath buildTargetDir = projects::projectContext().buildTargetPath();
       if (!buildTargetDir.isEmpty())
       {
          sessionInfo["build_target_dir"] = module_context::createAliasedPath(
                                                                 buildTargetDir);
-         sessionInfo["has_pkg_src"] = (type == r_util::kBuildTypePackage) &&
+         sessionInfo["has_pkg_src"] = (type == core::r_util::kBuildTypePackage) &&
             buildTargetDir.completeChildPath("src").exists();
          sessionInfo["has_pkg_vig"] =
-               (type == r_util::kBuildTypePackage) &&
+               (type == core::r_util::kBuildTypePackage) &&
                   buildTargetDir.completeChildPath("vignettes").exists();
       }
       else
       {
-         sessionInfo["build_target_dir"] = json::Value();
+         sessionInfo["build_target_dir"] = core::json::Value();
          sessionInfo["has_pkg_src"] = false;
          sessionInfo["has_pkg_vig"] = false;
       }
@@ -406,9 +406,9 @@ void handleClientInit(const boost::function<void()>& initFunction,
    }
    else
    {
-      sessionInfo["build_tools_type"] = r_util::kBuildTypeNone;
+      sessionInfo["build_tools_type"] = core::r_util::kBuildTypeNone;
       sessionInfo["build_tools_bookdown_website"] = false;
-      sessionInfo["build_target_dir"] = json::Value();
+      sessionInfo["build_target_dir"] = core::json::Value();
       sessionInfo["has_pkg_src"] = false;
       sessionInfo["has_pkg_vig"] = false;
    }
@@ -416,14 +416,14 @@ void handleClientInit(const boost::function<void()>& initFunction,
    sessionInfo["blogdown_config"] = modules::rmarkdown::blogdown::blogdownConfig();
    sessionInfo["is_bookdown_project"] = module_context::isBookdownProject();
    sessionInfo["is_distill_project"] = module_context::isDistillProject();
-   
+
    sessionInfo["graphics_backends"] = modules::graphics::supportedBackends();
 
    sessionInfo["presentation_state"] = modules::presentation::presentationStateAsJson();
    sessionInfo["presentation_commands"] = options.allowPresentationCommands();
 
    sessionInfo["tutorial_api_available"] = false;
-   sessionInfo["tutorial_api_client_origin"] = json::Value();
+   sessionInfo["tutorial_api_client_origin"] = core::json::Value();
 
    sessionInfo["build_state"] = modules::build::buildStateAsJson();
    sessionInfo["devtools_installed"] = module_context::isMinimumDevtoolsInstalled();
@@ -431,7 +431,7 @@ void handleClientInit(const boost::function<void()>& initFunction,
 
    // console history -- we do this at the end because
    // restoreBuildRestartContext may have reset it
-   json::Array historyArray;
+   core::json::Array historyArray;
    rstudio::r::session::consoleHistory().asJson(&historyArray);
    sessionInfo["console_history"] = historyArray;
    sessionInfo["console_history_capacity"] =
@@ -468,7 +468,7 @@ void handleClientInit(const boost::function<void()>& initFunction,
 
    // allow opening shared projects if it's enabled, and if there's shared
    // storage from which we can discover the shared projects
-   sessionInfo["allow_open_shared_projects"] = 
+   sessionInfo["allow_open_shared_projects"] =
          core::system::getenv(kRStudioDisableProjectSharing).empty() &&
          !options.getOverlayOption(kSessionSharedStoragePath).empty();
 
@@ -494,9 +494,9 @@ void handleClientInit(const boost::function<void()>& initFunction,
          modules::rmarkdown::rmarkdownPackageAvailable();
    sessionInfo["knit_params_available"] =
          modules::rmarkdown::knitParamsAvailable();
-   sessionInfo["knit_working_dir_available"] = 
+   sessionInfo["knit_working_dir_available"] =
          modules::rmarkdown::knitWorkingDirAvailable();
-   sessionInfo["ppt_available"] = 
+   sessionInfo["ppt_available"] =
          modules::rmarkdown::pptAvailable();
 
    sessionInfo["clang_available"] = modules::clang::isAvailable();
@@ -507,15 +507,15 @@ void handleClientInit(const boost::function<void()>& initFunction,
 
    sessionInfo["multi_session"] = options.multiSession();
 
-   json::Object rVersionsJson;
+   core::json::Object rVersionsJson;
    rVersionsJson["r_version"] = module_context::rVersion();
    rVersionsJson["r_version_label"] = module_context::rVersionLabel();
    rVersionsJson["r_home_dir"] = module_context::rHomeDir();
    sessionInfo["r_versions_info"] = rVersionsJson;
 
    sessionInfo["show_user_home_page"] = options.showUserHomePage();
-   sessionInfo["user_home_page_url"] = json::Value();
-   
+   sessionInfo["user_home_page_url"] = core::json::Value();
+
    sessionInfo["r_addins"] = modules::r_addins::addinRegistryAsJson();
    sessionInfo["package_provided_extensions"] = modules::ppe::indexer().getPayload();
 
@@ -530,7 +530,7 @@ void handleClientInit(const boost::function<void()>& initFunction,
    sessionInfo["drivers_support_licensing"] = options.supportsDriversLicensing();
 
    sessionInfo["quit_child_processes_on_exit"] = options.quitChildProcessesOnExit();
-   
+
    sessionInfo["git_commit_large_file_size"] = options.gitCommitLargeFileSize();
 
    sessionInfo["default_rsconnect_server"] = options.defaultRSConnectServer();
@@ -539,7 +539,7 @@ void handleClientInit(const boost::function<void()>& initFunction,
 
    sessionInfo["launcher_jobs_enabled"] = modules::overlay::launcherJobsFeatureDisplayed();
 
-   json::Object packageDependencies;
+   core::json::Object packageDependencies;
    error = modules::dependency_list::getDependencyList(&packageDependencies);
    if (error)
       LOG_ERROR(error);
@@ -570,7 +570,7 @@ void handleClientInit(const boost::function<void()>& initFunction,
 
    // create response  (we always set kEventsPending to false so that the client
    // won't poll for events until it is ready)
-   json::JsonRpcResponse jsonRpcResponse;
+   core::json::JsonRpcResponse jsonRpcResponse;
    jsonRpcResponse.setField(kEventsPending, "false");
    jsonRpcResponse.setResult(sessionInfo);
 
@@ -593,10 +593,10 @@ void handleClientInit(const boost::function<void()>& initFunction,
 
    // complete initialization of session
    init::ensureSessionInitialized();
-   
+
    // notify modules of the client init
    module_context::events().onClientInit();
-   
+
    // call the init function
    initFunction();
 }
@@ -604,4 +604,3 @@ void handleClientInit(const boost::function<void()>& initFunction,
 } // namespace init
 } // namespace session
 } // namespace rstudio
-
