diff --git a/CMakeGlobals.txt b/CMakeGlobals.txt
index b4c5b72..3af7838 100644
--- a/CMakeGlobals.txt
+++ b/CMakeGlobals.txt
@@ -179,7 +179,7 @@ else()
    else()
      set(RSTUDIO_INSTALL_BIN bin)
    endif()
-   set(RSTUDIO_INSTALL_SUPPORTING .)
+   set(RSTUDIO_INSTALL_SUPPORTING ${DISTRO_SHARE})
 endif()
 
 # if the install prefix is /usr/local then tweak as appropriate
diff --git a/src/cpp/CMakeLists.txt b/src/cpp/CMakeLists.txt
index df54994..4e49726 100644
--- a/src/cpp/CMakeLists.txt
+++ b/src/cpp/CMakeLists.txt
@@ -141,7 +141,7 @@ if(UNIX)
          add_definitions(-O0)
          add_definitions(-D_GLIBCXX_ASSERTIONS)
       endif()
-      set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pie -Wl,-z,relro,-z,now")
+      set(CMAKE_EXE_LINKER_FLAGS "-pie -Wl,-z,relro,-z,now ${CMAKE_EXE_LINKER_FLAGS}")
    endif()
 
    # other useful gcc diagnostics
diff --git a/src/cpp/core/HtmlUtils.cpp b/src/cpp/core/HtmlUtils.cpp
index 73de8ee..f6fe133 100644
--- a/src/cpp/core/HtmlUtils.cpp
+++ b/src/cpp/core/HtmlUtils.cpp
@@ -19,6 +19,7 @@
 
 #include <boost/format.hpp>
 #include <boost/algorithm/string/predicate.hpp>
+#include <boost/bind.hpp>
 
 #include <core/Base64.hpp>
 #include <core/FileSerializer.hpp>
diff --git a/src/cpp/core/file_lock/FileLock.cpp b/src/cpp/core/file_lock/FileLock.cpp
index e68d4b0..714db65 100644
--- a/src/cpp/core/file_lock/FileLock.cpp
+++ b/src/cpp/core/file_lock/FileLock.cpp
@@ -27,6 +27,7 @@
 #include <core/system/Xdg.hpp>
 
 #include <boost/algorithm/string.hpp>
+#include <boost/bind.hpp>
 
 // borrowed from SessionConstants.hpp
 #define kRStudioSessionRoute "RSTUDIO_SESSION_ROUTE"
diff --git a/src/cpp/core/system/PosixChildProcessTracker.cpp b/src/cpp/core/system/PosixChildProcessTracker.cpp
index 8cc8f50..150a7fd 100644
--- a/src/cpp/core/system/PosixChildProcessTracker.cpp
+++ b/src/cpp/core/system/PosixChildProcessTracker.cpp
@@ -20,6 +20,8 @@
 #include <boost/format.hpp>
 #include <boost/bind.hpp>
 
+using namespace boost::placeholders;
+
 namespace rstudio {
 namespace core {
 namespace system {
diff --git a/src/cpp/core/system/PosixOutputCapture.cpp b/src/cpp/core/system/PosixOutputCapture.cpp
index 549e90e..570896c 100644
--- a/src/cpp/core/system/PosixOutputCapture.cpp
+++ b/src/cpp/core/system/PosixOutputCapture.cpp
@@ -31,6 +31,8 @@
 
 #include <boost/bind.hpp>
 
+using namespace boost::placeholders;
+
 namespace rstudio {
 namespace core {
 namespace system {
diff --git a/src/cpp/desktop/CMakeLists.txt b/src/cpp/desktop/CMakeLists.txt
index b9d2d8f..206e53a 100644
--- a/src/cpp/desktop/CMakeLists.txt
+++ b/src/cpp/desktop/CMakeLists.txt
@@ -135,6 +135,13 @@ get_filename_component(QT_PLUGIN_PATH  "${QT_BIN_DIR}/../plugins" ABSOLUTE CACHE
 get_filename_component(QT_LIBRARY_PATH "${QT_BIN_DIR}/../lib"     ABSOLUTE CACHE)
 get_filename_component(QT_INSTALL_PATH "${QT_BIN_DIR}/.."         ABSOLUTE CACHE)
 
+find_path(QTSINGLEAPPLIB_INCLUDE_DIR NAMES QtSingleApplication
+  PATH_SUFFIXES QtSolutions
+  PATHS
+  /usr/include/qt5)
+find_library(QTSINGLEAPPLIB Qt5Solutions_SingleApplication-2.6
+  libQt5Solutions_SingleApplication-2.6)
+
 # disable clang warnings for qt sources
 if(APPLE)
    add_definitions(-Wno-unused-private-field
@@ -153,7 +160,6 @@ endif (NOT WIN32)
 
 set(MOC_DESKTOP_HEADER_FILES ${DESKTOP_HEADER_FILES})
 list(REMOVE_ITEM MOC_DESKTOP_HEADER_FILES
-  ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/qtsingleapplication/qtlockedfile.h
   ${CMAKE_CURRENT_SOURCE_DIR}/DesktopDetectRHome.hpp
   ${CMAKE_CURRENT_SOURCE_DIR}/DesktopOptions.hpp
   ${CMAKE_CURRENT_SOURCE_DIR}/DesktopRVersion.hpp
@@ -222,8 +228,6 @@ set(DESKTOP_SOURCE_FILES
   DesktopSynctex.cpp
   DesktopJobLauncherOverlay.cpp
   RemoteDesktopSessionLauncherOverlay.cpp
-  3rdparty/qtsingleapplication/qtsingleapplication.cpp
-  3rdparty/qtsingleapplication/qtlocalpeer.cpp
 )
 
 if(WIN32)
@@ -280,6 +284,7 @@ include_directories(
   ${OPENSSL_INCLUDE_DIR}
   ${CMAKE_CURRENT_SOURCE_DIR}
   ${CMAKE_CURRENT_BINARY_DIR}
+  ${QTSINGLEAPPLIB_INCLUDE_DIR}
   ${EXT_SOURCE_DIR}
   ${SESSION_SOURCE_DIR}/include
   ${TESTS_INCLUDE_DIR}
@@ -392,6 +397,7 @@ if(NOT APPLE)
    # set link dependencies
    target_link_libraries(rstudio
       ${RSTUDIO_QTMODULES}
+      ${QTSINGLEAPPLIB}
       ${QT_LIBRARIES}
       ${Boost_LIBRARIES}
       rstudio-core
diff --git a/src/cpp/desktop/DesktopPosixApplication.hpp b/src/cpp/desktop/DesktopPosixApplication.hpp
index 40f0fba..4dffcd8 100644
--- a/src/cpp/desktop/DesktopPosixApplication.hpp
+++ b/src/cpp/desktop/DesktopPosixApplication.hpp
@@ -16,7 +16,7 @@
 #ifndef DESKTOP_POSIX_APPLICATION_HPP
 #define DESKTOP_POSIX_APPLICATION_HPP
 
-#include "3rdparty/qtsingleapplication/QtSingleApplication"
+#include <QtSingleApplication>
 
 #include "DesktopApplicationLaunch.hpp"
 
diff --git a/src/cpp/r/CMakeLists.txt b/src/cpp/r/CMakeLists.txt
index 9802aaa..ec8966f 100644
--- a/src/cpp/r/CMakeLists.txt
+++ b/src/cpp/r/CMakeLists.txt
@@ -15,6 +15,18 @@
 
 project (R)
 
+# find the version of R in play
+find_package(LibR REQUIRED)
+execute_process(
+    COMMAND "${LIBR_EXECUTABLE}" "--vanilla" "--slave" "-e" "cat(as.character(getRversion()))"
+    OUTPUT_VARIABLE LIBR_VERSION)
+
+# parse and save the R version to a variable
+string(REPLACE "." ";" R_VERSION_LIST "${LIBR_VERSION}")
+list(GET R_VERSION_LIST 0 R_VERSION_MAJOR)
+list(GET R_VERSION_LIST 1 R_VERSION_MINOR)
+list(GET R_VERSION_LIST 2 R_VERSION_PATCH)
+
 # include files
 file(GLOB_RECURSE R_HEADER_FILES "*.h*")
 
diff --git a/src/cpp/r/config.h.in b/src/cpp/r/config.h.in
index 0b71e69..e60d03d 100644
--- a/src/cpp/r/config.h.in
+++ b/src/cpp/r/config.h.in
@@ -16,4 +16,10 @@
 
 #cmakedefine PANGO_CAIRO_FOUND
 
+// Important: These variables represent the version of R found during
+// compile/link time, NOT the version of R present at runtime.
+#define R_VERSION_MAJOR ${R_VERSION_MAJOR}
+#define R_VERSION_MINOR ${R_VERSION_MINOR}
+#define R_VERSION_PATCH ${R_VERSION_PATCH}
+
 
diff --git a/src/cpp/r/session/RStdCallbacks.cpp b/src/cpp/r/session/RStdCallbacks.cpp
index 214349b..63a6561 100644
--- a/src/cpp/r/session/RStdCallbacks.cpp
+++ b/src/cpp/r/session/RStdCallbacks.cpp
@@ -21,6 +21,7 @@
 
 #include <boost/function.hpp>
 #include <boost/regex.hpp>
+#include <boost/bind.hpp>
 
 #include <r/RExec.hpp>
 #include <r/ROptions.hpp>
diff --git a/src/cpp/server/CMakeLists.txt b/src/cpp/server/CMakeLists.txt
index 1585177..473cb57 100644
--- a/src/cpp/server/CMakeLists.txt
+++ b/src/cpp/server/CMakeLists.txt
@@ -213,7 +213,7 @@ if (UNIX AND NOT APPLE)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${RSERVER_INITD_DEBIAN_SCRIPT}.in
                   ${CMAKE_CURRENT_BINARY_DIR}/${RSERVER_INITD_DEBIAN_SCRIPT})
    install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/${RSERVER_INITD_DEBIAN_SCRIPT}
-           DESTINATION ${RSERVER_INITD_DEBIAN_DIR})
+           DESTINATION ${DISTRO_SHARE}/${RSERVER_INITD_DEBIAN_DIR})
 
    # install configured redhat init.d script
    set(RSERVER_INITD_REDHAT_DIR "extras/init.d/redhat")
@@ -221,7 +221,7 @@ if (UNIX AND NOT APPLE)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${RSERVER_INITD_REDHAT_SCRIPT}.in
                   ${CMAKE_CURRENT_BINARY_DIR}/${RSERVER_INITD_REDHAT_SCRIPT})
    install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/${RSERVER_INITD_REDHAT_SCRIPT}
-           DESTINATION ${RSERVER_INITD_REDHAT_DIR})
+           DESTINATION ${DISTRO_SHARE}/${RSERVER_INITD_REDHAT_DIR})
 
    # install configured suse init.d script
    set(RSERVER_INITD_SUSE_DIR "extras/init.d/suse")
@@ -229,13 +229,13 @@ if (UNIX AND NOT APPLE)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${RSERVER_INITD_SUSE_SCRIPT}.in
                   ${CMAKE_CURRENT_BINARY_DIR}/${RSERVER_INITD_SUSE_SCRIPT})
    install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/${RSERVER_INITD_SUSE_SCRIPT}
-           DESTINATION ${RSERVER_INITD_SUSE_DIR})
+           DESTINATION ${DISTRO_SHARE}/${RSERVER_INITD_SUSE_DIR})
 
    # install pam profile
    set(RSERVER_PAM_DIR "extras/pam")
    set(RSERVER_PAM_PROFILE "${RSERVER_PAM_DIR}/rstudio")
    install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${RSERVER_PAM_PROFILE}
-           DESTINATION ${RSERVER_PAM_DIR})
+           DESTINATION ${DISTRO_SHARE}/${RSERVER_PAM_DIR})
 
    # install configured upstart profile
    set(RSERVER_UPSTART_DIR "extras/upstart")
@@ -243,25 +243,20 @@ if (UNIX AND NOT APPLE)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${RSERVER_UPSTART_PROFILE}.in
                   ${CMAKE_CURRENT_BINARY_DIR}/${RSERVER_UPSTART_PROFILE})
    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${RSERVER_UPSTART_PROFILE}
-           DESTINATION ${RSERVER_UPSTART_DIR})
+           DESTINATION ${DISTRO_SHARE}/${RSERVER_UPSTART_DIR})
    set(RSERVER_UPSTART_PROFILE_REDHAT "${RSERVER_UPSTART_DIR}/rstudio-server.redhat.conf")
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${RSERVER_UPSTART_PROFILE_REDHAT}.in
                   ${CMAKE_CURRENT_BINARY_DIR}/${RSERVER_UPSTART_PROFILE_REDHAT})
    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${RSERVER_UPSTART_PROFILE_REDHAT}
-           DESTINATION ${RSERVER_UPSTART_DIR})
+           DESTINATION ${DISTRO_SHARE}/${RSERVER_UPSTART_DIR})
 
     # install configured systemd profile
-   set(RSERVER_SYSTEMD_DIR "extras/systemd")
+   set(RSERVER_SYSTEMD_DIR "lib/systemd/system")
    set(RSERVER_SYSTEMD_PROFILE "${RSERVER_SYSTEMD_DIR}/rstudio-server.service")
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${RSERVER_SYSTEMD_PROFILE}.in
                   ${CMAKE_CURRENT_BINARY_DIR}/${RSERVER_SYSTEMD_PROFILE})
    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${RSERVER_SYSTEMD_PROFILE}
            DESTINATION ${RSERVER_SYSTEMD_DIR})
-   set(RSERVER_SYSTEMD_PROFILE_REDHAT "${RSERVER_SYSTEMD_DIR}/rstudio-server.redhat.service")
-   configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${RSERVER_SYSTEMD_PROFILE_REDHAT}.in
-                  ${CMAKE_CURRENT_BINARY_DIR}/${RSERVER_SYSTEMD_PROFILE_REDHAT})
-   install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${RSERVER_SYSTEMD_PROFILE_REDHAT}
-           DESTINATION ${RSERVER_SYSTEMD_DIR})
 
 elseif(APPLE)
 
diff --git a/src/cpp/server/ServerOptions.cpp b/src/cpp/server/ServerOptions.cpp
index 25185e9..2496d20 100644
--- a/src/cpp/server/ServerOptions.cpp
+++ b/src/cpp/server/ServerOptions.cpp
@@ -285,8 +285,8 @@ ProgramStatus Options::read(int argc,
 
    // convert relative paths by completing from the system installation
    // path (this allows us to be relocatable)
-   resolvePath(resourcePath, &wwwLocalPath_);
-   resolvePath(resourcePath, &wwwSymbolMapsPath_);
+   resolvePath(resourcePath.completeChildPath(DISTRO_SHARE), &wwwLocalPath_);
+   resolvePath(resourcePath.completeChildPath(DISTRO_SHARE), &wwwSymbolMapsPath_);
    resolvePath(binaryPath, &authPamHelperPath_);
    resolvePath(binaryPath, &rsessionPath_);
    resolvePath(binaryPath, &rldpathPath_);
diff --git a/src/cpp/session/CMakeLists.txt b/src/cpp/session/CMakeLists.txt
index 9b6017f..34b80f5 100644
--- a/src/cpp/session/CMakeLists.txt
+++ b/src/cpp/session/CMakeLists.txt
@@ -22,13 +22,6 @@ add_subdirectory(workers)
 if(NOT EXISTS "${RSTUDIO_DEPENDENCIES_DIR}/common/dictionaries")
   message(FATAL_ERROR "Dictionaries not found (re-run install-dependencies script to install)")
 endif()
-if(NOT EXISTS "${RSTUDIO_DEPENDENCIES_DIR}/common/mathjax-27")
-  message(FATAL_ERROR "Mathjax 2.7 not found (re-run install-dependencies script to install)")
-endif()
-set(PANDOC_VERSION "2.11.2" CACHE INTERNAL "Pandoc version")
-if(NOT EXISTS "${RSTUDIO_DEPENDENCIES_DIR}/common/pandoc/${PANDOC_VERSION}")
-  message(FATAL_ERROR "pandoc ${PANDOC_VERSION} not found (re-run install-dependencies script to install)")
-endif()
 
 # verify embedded packages are available
 foreach(PKG ${RSTUDIO_EMBEDDED_PACKAGES})
@@ -534,10 +527,6 @@ if (NOT RSTUDIO_SESSION_WIN32)
    install(DIRECTORY "${RSTUDIO_DEPENDENCIES_DIR}/common/dictionaries"
            DESTINATION "${RSTUDIO_INSTALL_SUPPORTING}/resources")
 
-   # install mathjax for local html preview
-   install(DIRECTORY "${RSTUDIO_DEPENDENCIES_DIR}/common/mathjax-27"
-           DESTINATION "${RSTUDIO_INSTALL_SUPPORTING}/resources")
-
    # icons for database connections
    install(DIRECTORY "resources/connections"
            DESTINATION ${RSTUDIO_INSTALL_SUPPORTING}/resources)
@@ -550,13 +539,6 @@ if (NOT RSTUDIO_SESSION_WIN32)
    install(DIRECTORY "resources/dependencies"
            DESTINATION ${RSTUDIO_INSTALL_SUPPORTING}/resources)
 
-   # install pandoc
-   set(PANDOC_BIN "${RSTUDIO_DEPENDENCIES_DIR}/common/pandoc/${PANDOC_VERSION}")
-   file(GLOB PANDOC_FILES "${PANDOC_BIN}/pandoc*")
-   install(FILES ${PANDOC_FILES}
-           PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
-           DESTINATION  ${RSTUDIO_INSTALL_BIN}/pandoc)
-
    # install embedded packages
    foreach(PKG ${RSTUDIO_EMBEDDED_PACKAGES})
       file(GLOB PKG_FILES "${RSTUDIO_DEPENDENCIES_DIR}/common/${PKG}*.tar.gz")
diff --git a/src/cpp/session/SessionClientInit.cpp b/src/cpp/session/SessionClientInit.cpp
index e4b3b7d..cc61516 100644
--- a/src/cpp/session/SessionClientInit.cpp
+++ b/src/cpp/session/SessionClientInit.cpp
@@ -100,17 +100,17 @@ std::string userIdentityDisplay(const http::Request& request)
 }
 
 #ifdef RSTUDIO_SERVER
-Error makePortTokenCookie(boost::shared_ptr<HttpConnection> ptrConnection, 
+Error makePortTokenCookie(boost::shared_ptr<HttpConnection> ptrConnection,
       http::Response& response)
 {
    // extract the base URL
-   json::JsonRpcRequest request;
+   core::json::JsonRpcRequest request;
    Error error = parseJsonRpcRequest(ptrConnection->request().body(), &request);
    if (error)
       return error;
    std::string baseURL;
 
-   error = json::readParams(request.params, &baseURL);
+   error = core::json::readParams(request.params, &baseURL);
    if (error)
       return error;
 
@@ -143,9 +143,9 @@ Error makePortTokenCookie(boost::shared_ptr<HttpConnection> ptrConnection,
 
    // create the cookie; don't set an expiry date as this will be a session cookie
    http::Cookie cookie(
-            ptrConnection->request(), 
-            kPortTokenCookie, 
-            persistentState().portToken(), 
+            ptrConnection->request(),
+            kPortTokenCookie,
+            persistentState().portToken(),
             path,
             options().sameSite(),
             true, // HTTP only -- client doesn't get to read this token
@@ -164,12 +164,12 @@ void handleClientInit(const boost::function<void()>& initFunction,
 {
    // alias options
    Options& options = session::options();
-   
-   // check for valid CSRF headers in server mode 
-   if (options.programMode() == kSessionProgramModeServer && 
+
+   // check for valid CSRF headers in server mode
+   if (options.programMode() == kSessionProgramModeServer &&
        !core::http::validateCSRFHeaders(ptrConnection->request()))
    {
-      ptrConnection->sendJsonRpcError(Error(json::errc::Unauthorized, ERROR_LOCATION));
+      ptrConnection->sendJsonRpcError(Error(core::json::errc::Unauthorized, ERROR_LOCATION));
       return;
    }
 
@@ -204,12 +204,12 @@ void handleClientInit(const boost::function<void()>& initFunction,
    }
 
    // prepare session info 
-   json::Object sessionInfo;
+   core::json::Object sessionInfo;
    sessionInfo["clientId"] = clientId;
    sessionInfo["mode"] = options.programMode();
 
    // build initialization options for client
-   json::Object initOptions;
+   core::json::Object initOptions;
    initOptions["restore_workspace"] = options.rRestoreWorkspace();
    initOptions["run_rprofile"] = options.rRunRprofile();
    sessionInfo["init_options"] = initOptions;
@@ -225,49 +225,49 @@ void handleClientInit(const boost::function<void()>& initFunction,
    }
 
    // temp dir
-   FilePath tempDir = rstudio::r::session::utils::tempDir();
-   Error error = tempDir.ensureDirectory();
+   core::FilePath tempDir = rstudio::r::session::utils::tempDir();
+   core::Error error = tempDir.ensureDirectory();
    if (error)
       LOG_ERROR(error);
    sessionInfo["temp_dir"] = tempDir.getAbsolutePath();
 
    // R_LIBS_USER
    sessionInfo["r_libs_user"] = module_context::rLibsUser();
-   
+
    // user home path
    sessionInfo["user_home_path"] = session::options().userHomePath().getAbsolutePath();
-   
+
    // installed client version
    sessionInfo["client_version"] = http_methods::clientVersion();
-   
+
    // default prompt
    sessionInfo["prompt"] = rstudio::r::options::getOption<std::string>("prompt");
 
    // client state
-   json::Object clientStateObject;
+   core::json::Object clientStateObject;
    rstudio::r::session::clientState().currentState(&clientStateObject);
    sessionInfo["client_state"] = clientStateObject;
-   
+
    // source documents
-   json::Array jsonDocs;
+   core::json::Array jsonDocs;
    error = modules::source::clientInitDocuments(&jsonDocs);
    if (error)
       LOG_ERROR(error);
    sessionInfo["source_documents"] = jsonDocs;
-   
+
    // docs url
    sessionInfo["docsURL"] = session::options().docsURL();
 
    // get alias to console_actions and get limit
    rstudio::r::session::ConsoleActions& consoleActions = rstudio::r::session::consoleActions();
    sessionInfo["console_actions_limit"] = consoleActions.capacity();
- 
+
    // check if reticulate's Python session has been initialized
    sessionInfo["python_initialized"] = modules::reticulate::isPythonInitialized();
-   
+
    // propagate RETICULATE_PYTHON if set
    sessionInfo["reticulate_python"] = core::system::getenv("RETICULATE_PYTHON");
-   
+
    // get current console language
    sessionInfo["console_language"] = modules::reticulate::isReplActive() ? "Python" : "R";
 
@@ -276,7 +276,7 @@ void handleClientInit(const boost::function<void()>& initFunction,
    if (resumed)
    {
       // console actions
-      json::Object actionsObject;
+     core::json::Object actionsObject;
       consoleActions.asJson(&actionsObject);
       sessionInfo["console_actions"] = actionsObject;
    }
@@ -313,7 +313,7 @@ void handleClientInit(const boost::function<void()>& initFunction,
 
    sessionInfo["have_advanced_step_commands"] =
                         modules::breakpoints::haveAdvancedStepCommands();
-   
+
    // initial working directory
    std::string initialWorkingDir = module_context::createAliasedPath(
                                           dirs::getInitialWorkingDirectory());
@@ -332,9 +332,9 @@ void handleClientInit(const boost::function<void()>& initFunction,
                               projects::projectContext().file());
       sessionInfo["project_ui_prefs"] = projects::projectContext().uiPrefs();
       sessionInfo["project_open_docs"] = projects::projectContext().openDocs();
-      sessionInfo["project_supports_sharing"] = 
+      sessionInfo["project_supports_sharing"] =
          projects::projectContext().supportsSharing();
-      sessionInfo["project_parent_browseable"] = 
+      sessionInfo["project_parent_browseable"] =
          projects::projectContext().parentBrowseable();
       sessionInfo["project_user_data_directory"] =
        module_context::createAliasedPath(
@@ -343,12 +343,12 @@ void handleClientInit(const boost::function<void()>& initFunction,
    }
    else
    {
-      sessionInfo["active_project_file"] = json::Value();
-      sessionInfo["project_ui_prefs"] = json::Value();
-      sessionInfo["project_open_docs"] = json::Value();
+      sessionInfo["active_project_file"] = core::json::Value();
+      sessionInfo["project_ui_prefs"] = core::json::Value();
+      sessionInfo["project_open_docs"] = core::json::Value();
       sessionInfo["project_supports_sharing"] = false;
       sessionInfo["project_owned_by_user"] = false;
-      sessionInfo["project_user_data_directory"] = json::Value();
+      sessionInfo["project_user_data_directory"] = core::json::Value();
    }
 
    sessionInfo["system_encoding"] = std::string(::locale2charset(nullptr));
@@ -385,20 +385,20 @@ void handleClientInit(const boost::function<void()>& initFunction,
       sessionInfo["build_tools_bookdown_website"] =
                               module_context::isBookdownWebsite();
 
-      FilePath buildTargetDir = projects::projectContext().buildTargetPath();
+      core::FilePath buildTargetDir = projects::projectContext().buildTargetPath();
       if (!buildTargetDir.isEmpty())
       {
          sessionInfo["build_target_dir"] = module_context::createAliasedPath(
                                                                 buildTargetDir);
-         sessionInfo["has_pkg_src"] = (type == r_util::kBuildTypePackage) &&
+         sessionInfo["has_pkg_src"] = (type == core::r_util::kBuildTypePackage) &&
             buildTargetDir.completeChildPath("src").exists();
          sessionInfo["has_pkg_vig"] =
-               (type == r_util::kBuildTypePackage) &&
+               (type == core::r_util::kBuildTypePackage) &&
                   buildTargetDir.completeChildPath("vignettes").exists();
       }
       else
       {
-         sessionInfo["build_target_dir"] = json::Value();
+         sessionInfo["build_target_dir"] = core::json::Value();
          sessionInfo["has_pkg_src"] = false;
          sessionInfo["has_pkg_vig"] = false;
       }
@@ -406,9 +406,9 @@ void handleClientInit(const boost::function<void()>& initFunction,
    }
    else
    {
-      sessionInfo["build_tools_type"] = r_util::kBuildTypeNone;
+      sessionInfo["build_tools_type"] = core::r_util::kBuildTypeNone;
       sessionInfo["build_tools_bookdown_website"] = false;
-      sessionInfo["build_target_dir"] = json::Value();
+      sessionInfo["build_target_dir"] = core::json::Value();
       sessionInfo["has_pkg_src"] = false;
       sessionInfo["has_pkg_vig"] = false;
    }
@@ -416,14 +416,14 @@ void handleClientInit(const boost::function<void()>& initFunction,
    sessionInfo["blogdown_config"] = modules::rmarkdown::blogdown::blogdownConfig();
    sessionInfo["is_bookdown_project"] = module_context::isBookdownProject();
    sessionInfo["is_distill_project"] = module_context::isDistillProject();
-   
+
    sessionInfo["graphics_backends"] = modules::graphics::supportedBackends();
 
    sessionInfo["presentation_state"] = modules::presentation::presentationStateAsJson();
    sessionInfo["presentation_commands"] = options.allowPresentationCommands();
 
    sessionInfo["tutorial_api_available"] = false;
-   sessionInfo["tutorial_api_client_origin"] = json::Value();
+   sessionInfo["tutorial_api_client_origin"] = core::json::Value();
 
    sessionInfo["build_state"] = modules::build::buildStateAsJson();
    sessionInfo["devtools_installed"] = module_context::isMinimumDevtoolsInstalled();
@@ -431,7 +431,7 @@ void handleClientInit(const boost::function<void()>& initFunction,
 
    // console history -- we do this at the end because
    // restoreBuildRestartContext may have reset it
-   json::Array historyArray;
+   core::json::Array historyArray;
    rstudio::r::session::consoleHistory().asJson(&historyArray);
    sessionInfo["console_history"] = historyArray;
    sessionInfo["console_history_capacity"] =
@@ -468,7 +468,7 @@ void handleClientInit(const boost::function<void()>& initFunction,
 
    // allow opening shared projects if it's enabled, and if there's shared
    // storage from which we can discover the shared projects
-   sessionInfo["allow_open_shared_projects"] = 
+   sessionInfo["allow_open_shared_projects"] =
          core::system::getenv(kRStudioDisableProjectSharing).empty() &&
          !options.getOverlayOption(kSessionSharedStoragePath).empty();
 
@@ -494,9 +494,9 @@ void handleClientInit(const boost::function<void()>& initFunction,
          modules::rmarkdown::rmarkdownPackageAvailable();
    sessionInfo["knit_params_available"] =
          modules::rmarkdown::knitParamsAvailable();
-   sessionInfo["knit_working_dir_available"] = 
+   sessionInfo["knit_working_dir_available"] =
          modules::rmarkdown::knitWorkingDirAvailable();
-   sessionInfo["ppt_available"] = 
+   sessionInfo["ppt_available"] =
          modules::rmarkdown::pptAvailable();
 
    sessionInfo["clang_available"] = modules::clang::isAvailable();
@@ -507,15 +507,15 @@ void handleClientInit(const boost::function<void()>& initFunction,
 
    sessionInfo["multi_session"] = options.multiSession();
 
-   json::Object rVersionsJson;
+   core::json::Object rVersionsJson;
    rVersionsJson["r_version"] = module_context::rVersion();
    rVersionsJson["r_version_label"] = module_context::rVersionLabel();
    rVersionsJson["r_home_dir"] = module_context::rHomeDir();
    sessionInfo["r_versions_info"] = rVersionsJson;
 
    sessionInfo["show_user_home_page"] = options.showUserHomePage();
-   sessionInfo["user_home_page_url"] = json::Value();
-   
+   sessionInfo["user_home_page_url"] = core::json::Value();
+
    sessionInfo["r_addins"] = modules::r_addins::addinRegistryAsJson();
    sessionInfo["package_provided_extensions"] = modules::ppe::indexer().getPayload();
 
@@ -530,7 +530,7 @@ void handleClientInit(const boost::function<void()>& initFunction,
    sessionInfo["drivers_support_licensing"] = options.supportsDriversLicensing();
 
    sessionInfo["quit_child_processes_on_exit"] = options.quitChildProcessesOnExit();
-   
+
    sessionInfo["git_commit_large_file_size"] = options.gitCommitLargeFileSize();
 
    sessionInfo["default_rsconnect_server"] = options.defaultRSConnectServer();
@@ -539,7 +539,7 @@ void handleClientInit(const boost::function<void()>& initFunction,
 
    sessionInfo["launcher_jobs_enabled"] = modules::overlay::launcherJobsFeatureDisplayed();
 
-   json::Object packageDependencies;
+   core::json::Object packageDependencies;
    error = modules::dependency_list::getDependencyList(&packageDependencies);
    if (error)
       LOG_ERROR(error);
@@ -570,7 +570,7 @@ void handleClientInit(const boost::function<void()>& initFunction,
 
    // create response  (we always set kEventsPending to false so that the client
    // won't poll for events until it is ready)
-   json::JsonRpcResponse jsonRpcResponse;
+   core::json::JsonRpcResponse jsonRpcResponse;
    jsonRpcResponse.setField(kEventsPending, "false");
    jsonRpcResponse.setResult(sessionInfo);
 
@@ -593,10 +593,10 @@ void handleClientInit(const boost::function<void()>& initFunction,
 
    // complete initialization of session
    init::ensureSessionInitialized();
-   
+
    // notify modules of the client init
    module_context::events().onClientInit();
-   
+
    // call the init function
    initFunction();
 }
@@ -604,4 +604,3 @@ void handleClientInit(const boost::function<void()>& initFunction,
 } // namespace init
 } // namespace session
 } // namespace rstudio
-
diff --git a/src/cpp/session/SessionOptions.cpp b/src/cpp/session/SessionOptions.cpp
index 1caf8db..769687b 100644
--- a/src/cpp/session/SessionOptions.cpp
+++ b/src/cpp/session/SessionOptions.cpp
@@ -263,13 +263,13 @@ core::ProgramStatus Options::read(int argc, char * const argv[], std::ostream& o
    }
    
    // convert relative paths by completing from the app resource path
-   resolvePath(resourcePath_, &rResourcesPath_);
-   resolvePath(resourcePath_, &wwwLocalPath_);
-   resolvePath(resourcePath_, &wwwSymbolMapsPath_);
-   resolvePath(resourcePath_, &coreRSourcePath_);
-   resolvePath(resourcePath_, &modulesRSourcePath_);
-   resolvePath(resourcePath_, &sessionLibraryPath_);
-   resolvePath(resourcePath_, &sessionPackageArchivesPath_);
+   resolvePath(resourcePath_.completeChildPath(DISTRO_SHARE), &rResourcesPath_);
+   resolvePath(resourcePath_.completeChildPath(DISTRO_SHARE), &wwwLocalPath_);
+   resolvePath(resourcePath_.completeChildPath(DISTRO_SHARE), &wwwSymbolMapsPath_);
+   resolvePath(resourcePath_.completeChildPath(DISTRO_SHARE), &coreRSourcePath_);
+   resolvePath(resourcePath_.completeChildPath(DISTRO_SHARE), &modulesRSourcePath_);
+   resolvePath(resourcePath_.completeChildPath(DISTRO_SHARE), &sessionLibraryPath_);
+   resolvePath(resourcePath_.completeChildPath(DISTRO_SHARE), &sessionPackageArchivesPath_);
    resolvePostbackPath(resourcePath_, &rpostbackPath_);
 #ifdef _WIN32
    resolvePath(resourcePath_, &consoleIoPath_);
@@ -302,7 +302,7 @@ core::ProgramStatus Options::read(int argc, char * const argv[], std::ostream& o
    }
    winptyPath_ = pty.completePath(completion).getAbsolutePath();
 #endif // _WIN32
-   resolvePath(resourcePath_, &hunspellDictionariesPath_);
+   resolvePath(resourcePath_.completeChildPath(DISTRO_SHARE), &hunspellDictionariesPath_);
    resolvePath(resourcePath_, &mathjaxPath_);
    resolvePath(resourcePath_, &libclangHeadersPath_);
    resolvePandocPath(resourcePath_, &pandocPath_);
diff --git a/src/gwt/build.xml b/src/gwt/build.xml
index 899ae7f..befbe37 100644
--- a/src/gwt/build.xml
+++ b/src/gwt/build.xml
@@ -28,19 +28,37 @@
             classname="com.google.javascript.jscomp.ant.CompileTask"
             classpath="${tools.dir}/compiler/compiler.jar"/>
 
+   <!-- Configure path to aopalliance -->
+   <property name="aopalliance.sdk" value="@GENTOO_PORTAGE_EPREFIX@/usr/share/aopalliance-1/lib"/>
+
+   <!-- Configure path to javax-inject -->
+   <property name="javax.inject" value="@GENTOO_PORTAGE_EPREFIX@/usr/share/javax-inject/lib"/>
+
+   <!-- Configure path to validation-api -->
+   <property name="validation.api" value="@GENTOO_PORTAGE_EPREFIX@/usr/share/validation-api-1.0/lib"/>
+   <property name="validation.api.sources" value="@GENTOO_PORTAGE_EPREFIX@/usr/share/validation-api-1.0/sources"/>
+
    <!-- Configure path to GWT SDK -->
    <property name="gwt.sdk" value="${lib.dir}/gwt/gwt-rstudio"/>
+   <!-- Configure path to Google Gin -->
+   <property name="gin.sdk" value="@GENTOO_PORTAGE_EPREFIX@/usr/share/gin-2.1/lib"/>
+
    <property name="gwt.extra.args" value=""/>
    <property name="gwt.main.module" value="org.rstudio.studio.RStudio"/>
    <property name="ace.bin" value="${src.dir}/org/rstudio/studio/client/workbench/views/source/editors/text/ace"/>
+   <property environment="env"/>
 
    <!-- configure code server -->
    <property name="bind.address" value="127.0.0.1"/>
 
    <path id="project.class.path">
      <pathelement location="${build.dir}"/>
+      <fileset dir="${aopalliance.sdk}" includes="*.jar"/>
+      <fileset dir="${javax.inject}" includes="*.jar"/>
+      <fileset dir="${validation.api}" includes="*.jar"/>
+      <fileset dir="${validation.api.sources}" includes="*.zip"/>
       <fileset dir="${gwt.sdk}" includes="*.jar"/>
-      <fileset dir="${lib.dir}/gin/2.1.2" includes="*.jar"/>
+      <fileset dir="${gin.sdk}" includes="*.jar"/>
       <fileset dir="${lib.dir}/elemental2/" includes="*.jar"/>
    </path>
 
@@ -146,8 +164,10 @@
             <pathelement location="${src.dir}"/>
             <path refid="project.class.path"/>
          </classpath>
+         <jvmarg value="-Duser.home=${env.T}"/>
          <!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
          <jvmarg value="-Xmx1536M"/>
+         <jvmarg value="-Djava.util.prefs.userRoot=${env.T}"/>
          <arg value="-war"/>
          <arg value="${www.dir}"/>
          <arg value="-localWorkers"/>
@@ -213,6 +233,7 @@
             <pathelement location="${src.dir}"/>
             <path refid="project.class.path"/>
          </classpath>
+         <jvmarg value="-Duser.home=${env.T}"/>
          <jvmarg value="-Xmx2048M"/>
          <arg value="-style"/>
          <arg value="PRETTY"/>
@@ -258,6 +279,7 @@
             <pathelement location="${test.dir}"/>
             <pathelement location="${src.dir}"/>
         </classpath>
+        <jvmarg value="-Duser.home=${env.T}"/>
         <classpath refid="project.class.path"/>
         <classpath refid="unittest.class.path"/>
         <arg value="org.rstudio.studio.client.RStudioUnitTestSuite"/>
